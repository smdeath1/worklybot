import sqlite3
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import Command, CommandStart

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7957098235:AAEI6XTZ_zZBMYViaJDymUZ-HFhXhyZtoew"
ADMIN_ID = 8143784621
ADMIN_USERNAME = "belovdanila"

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}  # {telegram_id: {"step": str, "city": str (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)}}
user_edit_states = {}  # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
vacancy_states = {}  # –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º {telegram_id: {"current_index": int, "vacancy_list": list}}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        with sqlite3.connect("jobs.db", check_same_thread=False) as conn:
            cur = conn.cursor()
            cur.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    telegram_id INTEGER PRIMARY KEY,
                    employer_code TEXT UNIQUE,
                    subscription_active INTEGER DEFAULT 0,
                    subscription_start TEXT
                )
            ''')
            cur.execute('''
                CREATE TABLE IF NOT EXISTS vacancies (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    employer_code TEXT,
                    city TEXT NOT NULL,
                    description TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (employer_code) REFERENCES users(employer_code)
                )
            ''')
            cur.execute("SELECT COUNT(*) FROM users WHERE telegram_id = ?", (ADMIN_ID,))
            if cur.fetchone()[0] == 0:
                cur.execute(
                    "INSERT INTO users (telegram_id, employer_code, subscription_active, subscription_start) "
                    "VALUES (?, ?, ?, ?)",
                    (ADMIN_ID, "EMP_ADMIN", 1, datetime.now().strftime("%Y-%m-%d"))
                )
                cur.execute(
                    "INSERT INTO vacancies (employer_code, city, description) VALUES (?, ?, ?)",
                    ("EMP_ADMIN", "–ú–æ—Å–∫–≤–∞", "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Python")
                )
            conn.commit()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")
        raise

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
def get_employer_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
    kb.button(text="–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
    kb.button(text="–ü–æ–¥–ø–∏—Å–∫–∞")
    return kb.as_markup(resize_keyboard=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="–Ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å")
    kb.button(text="–ò—â—É —Ä–∞–±–æ—Ç—É")
    return kb.as_markup(resize_keyboard=True)

# /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    uid = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=get_start_keyboard())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
@dp.message(lambda message: message.text == "–Ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å")
async def employer_start(message: Message):
    try:
        uid = message.from_user.id
        with sqlite3.connect("jobs.db", check_same_thread=False) as conn:
            cur = conn.cursor()
            cur.execute("SELECT employer_code FROM users WHERE telegram_id = ?", (uid,))
            row = cur.fetchone()
            if not row:
                employer_code = f"EMP{uid}"
                cur.execute(
                    "INSERT INTO users (telegram_id, employer_code, subscription_active) VALUES (?, ?, ?)",(uid, employer_code, 0)
                )
                conn.commit()
            else:
                employer_code = row[0]
        kb = ReplyKeyboardBuilder()
        kb.button(text="–û–ø–ª–∞—Ç–∏–ª")
        await message.answer(
            f"‚úÖ –í–∞—à –∫–æ–¥: <b>{employer_code}</b>\nüì© –°–≤—è–∂–∏—Ç–µ—Å—å —Å @{ADMIN_USERNAME} –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
            f"–ù–∞–∂–º–∏—Ç–µ <b>–û–ø–ª–∞—Ç–∏–ª</b> –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
            reply_markup=kb.as_markup(resize_keyboard=True)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ employer_start: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
@dp.message(lambda message: message.text == "–û–ø–ª–∞—Ç–∏–ª")
async def check_payment(message: Message):
    try:
        uid = message.from_user.id
        with sqlite3.connect("jobs.db", check_same_thread=False) as conn:
            cur = conn.cursor()
            cur.execute("SELECT subscription_active, subscription_start FROM users WHERE telegram_id = ?", (uid,))
            row = cur.fetchone()
            if row and row[0] == 1 and row[1]:
                start_date = datetime.strptime(row[1], "%Y-%m-%d")
                if datetime.now() - start_date <= timedelta(days=30):
                    user_states[uid] = {"step": "employer_menu"}
                    await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!", reply_markup=get_employer_keyboard())
                    return
            await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_payment: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
@dp.message(lambda message: message.text == "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def add_vacancy(message: Message):
    try:
        uid = message.from_user.id
        with sqlite3.connect("jobs.db", check_same_thread=False) as conn:
            cur = conn.cursor()
            cur.execute("SELECT subscription_active, subscription_start FROM users WHERE telegram_id = ?", (uid,))
            user = cur.fetchone()
            if not user or user[0] != 1 or not user[1] or (datetime.now() - datetime.strptime(user[1], "%Y-%m-%d")).days > 30:
                await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=get_employer_keyboard())
                return
        user_states[uid] = {"step": "city"}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_vacancy: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π
@dp.message(lambda message: message.text == "–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
async def my_vacancies(message: Message):
    try:
        uid = message.from_user.id
        with sqlite3.connect("jobs.db", check_same_thread=False) as conn:
            cur = conn.cursor()
            cur.execute("SELECT employer_code, subscription_active, subscription_start FROM users WHERE telegram_id = ?", (uid,))
            user = cur.fetchone()
            if not user:
                await message.answer("‚ùå –í—ã –Ω–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å.", reply_markup=get_start_keyboard())
                return
            if user[1] != 1 or not user[2] or (datetime.now() - datetime.strptime(user[2], "%Y-%m-%d")).days > 30:
                await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=get_start_keyboard())
                return
            cur.execute("SELECT id, description FROM vacancies WHERE employer_code = ?", (user[0],))
            vacancies = cur.fetchall()
            if not vacancies:
                await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.", reply_markup=get_employer_keyboard())
                return
        vacancy_states[uid] = {"current_index": 0, "vacancy_list": vacancies}
        vid, desc = vacancies[0]
        kb = ReplyKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        kb.button(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        kb.button(text="–£–¥–∞–ª–∏—Ç—å")
        kb.button(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥")
        await message.answer(f"<b>–í–∞–∫–∞–Ω—Å–∏—è #{vid}:</b>\n{desc}", reply_markup=kb.as_markup(resize_keyboard=True))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_vacancies: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
@dp.message(lambda message: message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–£–¥–∞–ª–∏—Ç—å"])
async def handle_vacancy_actions(message: Message):
    try:
        uid = message.from_user.id
        if uid not in vacancy_states:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=get_employer_keyboard())
            return
        state = vacancy_states[uid]
        current_index = state["current_index"]
        vacancies = state["vacancy_list"]
        vid, desc = vacancies[current_index]
        text = message.text
        kb = ReplyKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        kb.button(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        kb.button(text="–£–¥–∞–ª–∏—Ç—å")
        kb.button(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥")

        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            if current_index > 0:
                state["current_index"] -= 1
                vid, desc = vacancies[state["current_index"]]
            else:
                await message.answer(f"<b>–í–∞–∫–∞–Ω—Å–∏—è #{vid}:</b>\n{desc}\n–≠—Ç–æ –ø–µ—Ä–≤–∞—è.", reply_markup=kb.as_markup(resize_keyboard=True))
                return
        elif text == "‚û°Ô∏è –í–ø–µ—Ä–µ–¥":
            if current_index < len(vacancies) - 1:
                state["current_index"] += 1
                vid, desc = vacancies[state["current_index"]]
            else:
                await message.answer(f"<b>–í–∞–∫–∞–Ω—Å–∏—è #{vid}:</b>\n{desc}\n–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è.", reply_markup=kb.as_markup(resize_keyboard=True))
                return
        elif text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
            user_edit_states[uid] = vid
            vacancy_states.pop(uid, None)
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è #{vid}:")
            return
        elif text == "–£–¥–∞–ª–∏—Ç—å":
            with sqlite3.connect("jobs.db", check_same_thread=False) as conn:
                cur = conn.cursor()
                cur.execute("SELECT employer_code FROM users WHERE telegram_id = ?", (uid,))
                employer_code = cur.fetchone()[0]
                cur.execute("DELETE FROM vacancies WHERE id = ? AND employer_code = ?", (vid, employer_code))
                if cur.rowcount == 0:
                    await message.answer("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_employer_keyboard())
                    return
                conn.commit()
                vacancies.pop(current_index)
                if not vacancies:
                    vacancy_states.pop(uid, None)
                    await message.answer(f"‚úÖ #{vid} —É–¥–∞–ª–µ–Ω–∞. –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.", reply_markup=get_employer_keyboard())
                    return
                if current_index >= len(vacancies):
                    state["current_index"] = len(vacancies) - 1
                vid, desc = vacancies[state["current_index"]]
        await message.answer(f"<b>–í–∞–∫–∞–Ω—Å–∏—è #{vid}:</b>\n{desc}", reply_markup=kb.as_markup(resize_keyboard=True))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_vacancy_actions: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
@dp.message()
async def handle_input(message: Message):
    try:
        uid = message.from_user.id
        text = message.text.strip()
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è user {uid}: {text}")

        # –ò—â—É —Ä–∞–±–æ—Ç—É
        if text == "–ò—â—É —Ä–∞–±–æ—Ç—É":
            user_states[uid] = {"step": "worker_city"}
            logger.info(f"User {uid} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            return

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        if uid in user_edit_states:
            vid = user_edit_states.pop(uid)
            new_desc = text
            with sqlite3.connect("jobs.db", check_same_thread=False) as conn:
                cur = conn.cursor()
                cur.execute("SELECT employer_code FROM users WHERE telegram_id = ?", (uid,))
                employer_code = cur.fetchone()[0]
                cur.execute(
                "UPDATE vacancies SET description = ? WHERE id = ? AND employer_code = ?",
                    (new_desc, vid, employer_code)
                )
                if cur.rowcount == 0:
                    await message.answer("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_employer_keyboard())
                    return
                conn.commit()
            await message.answer(f"‚úÖ #{vid} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=get_employer_keyboard())
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        if uid in user_states and user_states[uid].get("step") == "city":
            if not text:
                await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
                return
            user_states[uid]["city"] = text
            user_states[uid]["step"] = "desc"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            return
        elif uid in user_states and user_states[uid].get("step") == "desc":
            if not text:
                await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
                return
            city = user_states[uid]["city"]
            desc = text
            with sqlite3.connect("jobs.db", check_same_thread=False) as conn:
                cur = conn.cursor()
                cur.execute("SELECT employer_code FROM users WHERE telegram_id = ?", (uid,))
                employer_code = cur.fetchone()[0]
                cur.execute(
                    "INSERT INTO vacancies (employer_code, city, description) VALUES (?, ?, ?)",
                    (employer_code, city, desc)
                )
                conn.commit()
            user_states.pop(uid, None)
            await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=get_employer_keyboard())
            return

        # –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã
        if uid in user_states and user_states[uid].get("step") == "worker_city":
            city = text
            logger.info(f"–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è user {uid} –≤ –≥–æ—Ä–æ–¥–µ {city}")
            with sqlite3.connect("jobs.db", check_same_thread=False) as conn:
                cur = conn.cursor()
                cur.execute("SELECT id, description FROM vacancies WHERE city LIKE ?", (f"%{city}%",))
                rows = cur.fetchall()
                if not rows:
                    await message.answer("üì≠ –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.", reply_markup=get_start_keyboard())
                else:
                    response = "<b>–í–∞–∫–∞–Ω—Å–∏–∏:</b>\n"
                    for vid, desc in rows:
                        response += f"#{vid}: {desc[:50] + '...' if len(desc) > 50 else desc}\n"
                    await message.answer(response, reply_markup=get_start_keyboard())
            user_states.pop(uid, None)
            return

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if text == "–ü–æ–¥–ø–∏—Å–∫–∞":
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user {uid}")
            with sqlite3.connect("jobs.db", check_same_thread=False) as conn:
                cur = conn.cursor()
                cur.execute("SELECT subscription_active, subscription_start FROM users WHERE telegram_id = ?", (uid,))
                row = cur.fetchone()
                if not row or not row[0] or not row[1]:
                    await message.answer("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=get_employer_keyboard())
                else:
                    start = datetime.strptime(row[1], "%Y-%m-%d")
                    days_left = 30 - (datetime.now() - start).days
                    await message.answer(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {max(0, days_left)} –¥–Ω–µ–π.", reply_markup=get_employer_keyboard())
            return

        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è user {uid}: {text}")
        if uid in user_states and user_states[uid].get("step") == "employer_menu":
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=get_employer_keyboard())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=get_start_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_input: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /pay –¥–ª—è –∞–¥–º–∏–Ω–∞
@dp.message(Command("pay"))
async def admin_confirm_payment(message: Message):
    try:
        if message.from_user.id != ADMIN_ID:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pay <employer_code>")
            return

        employer_code = args[1].strip()
        with sqlite3.connect("jobs.db", check_same_thread=False) as conn:
            cur = conn.cursor()
            cur.execute("SELECT telegram_id FROM users WHERE employer_code = ?", (employer_code,))
            row = cur.fetchone()
            if not row:
                await message.answer("‚ùå –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            cur.execute(
                "UPDATE users SET subscription_active = 1, subscription_start = ? WHERE employer_code = ?",
                (datetime.now().strftime("%Y-%m-%d"), employer_code)
            )
            conn.commit()
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {employer_code} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_confirm_payment: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    init_db()
    dp.run_polling(bot)
